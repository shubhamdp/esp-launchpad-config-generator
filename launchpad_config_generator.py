#!/usr/bin/env python3
# Copyright 2024 Espressif Systems (Shanghai) PTE LTD
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script generates the launchpad config based on the application binaries
# present in the images/ directory
# Sample launchapd config: https://github.com/espressif/esp-launchpad/blob/main/config/config.toml
#
# This requires the merged binary names in a specific format
# <TARGET>_<APP_NAME>.bin
# eg: esp32_light.bin, esp32c3_light.bin
#
# Above mentioned binaries are generated by the ci

import os
import click


def get_deployment_vars(repo_owner, repo_name, out_file):
    return {
        "REPO_OWNER": repo_owner or "espressif",
        "REPO_NAME": repo_name or "esp-matter",
        "OUT_FILE": out_file or "launchpad.toml",
    }


# create the map containing the supported SoCs and their images
def create_config_map():
    config_map = {}

    apps = sorted(set(app.split('_', 1)[1].split('.')[0] for app in os.listdir() if "esp32" in app))

    for app in apps:
        targets = [file.split('_')[0] for file in os.listdir() if file.endswith(f'{app}.bin')]
        chipsets = [target.upper() for target in targets]
        images = {target: f"{target}_{app}.bin" for target in targets}

        config_map[app] = {
            "chipsets": chipsets,
            "images": images,
        }

    return config_map

# Function to write config map to file
def write_config_file(vars, config_map):
    with open(vars["OUT_FILE"], 'w') as out_file:
        out_file.write(f'esp_toml_version = 1.0\n')
        out_file.write(f'firmware_images_url = "https://{vars["REPO_OWNER"]}.github.io/{vars["REPO_NAME"]}"\n')
        out_file.write(f'config_readme_url = "https://{vars["REPO_OWNER"]}.github.io/{vars["REPO_NAME"]}/build_cfg.md"\n\n')

        # Write supported applications list
        supported_apps = f'supported_apps = [{",".join([f'"{app}"' for app in config_map.keys()])}]'
        out_file.write(supported_apps + "\n\n")

        # Write configs for each app
        for app, config in config_map.items():
            out_file.write(f'[{app}]\n')
            chipsets = f'chipsets = [{",".join([f'"{chipset}"' for chipset in config["chipsets"]])}]'
            out_file.write(chipsets + "\n")

            for target, image in config["images"].items():
                out_file.write(f'image.{target} = "{image}"\n')

            # use these only if its esp-matter or esp-rainmaker else we can skip it
            out_file.write('ios_app_url = "https://apps.apple.com/app/esp-rainmaker/id1497491540"\n')
            out_file.write('android_app_url = "https://play.google.com/store/apps/details?id=com.espressif.rainmaker"\n')
            out_file.write('readme.text = "https://raw.githubusercontent.com/espressif/esp-matter/main/tools/launchpad/qrcode-content.md"\n\n')

@click.command()
@click.option('--repo-owner', required=False)
@click.option('--repo-name', required=False)
@click.option('--out-file', required=False)
def main(repo_owner, repo_name, out_file):
    vars = get_deployment_vars(repo_owner, repo_name, out_file)
    config_map = create_config_map()
    write_config_file(vars, config_map)

if __name__ == '__main__':
    main()
